@model IEnumerable<CodeBustersWMU1.Models.Product>
@using CodeBustersWMU1.Models
@{
    ViewBag.Title = "Produkter";
}

@* css styling för att description div taggen inte ska bli för bred *@




<h2>@ViewBag.Title</h2>


<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Image)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ArticleName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Price)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Remaining)
        </th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @{  String path = "~/Content/Images/";
                    path = @path + @Html.DisplayFor(modelItem => item.Image);
                }
                <img src="@Url.Content(@path)" alt="bild" width="250" height="250" />


            </td>

            <td>

                <div id="description">

                    @Html.ActionLink(@item.ArticleName, "Details", "Details", new { id = @item.ArticleId }, null)

                    <br />
                    <br />
                    @{
                        String description = @item.Description;
                        description = description.Substring(0, 50);
                        description = String.Concat(description, "...");

                    }
                    <p>@description</p>
                </div>
            </td>
            <td>
                @{
                    double withTax = item.Price * 1.25;
                    string priceString = withTax.ToString("C");
                    <label>@priceString</label>
                }
            </td>
            <td>
                @{
                    /* Different status message, depending on remaining quantity */
                    string message = "";
                    int remains = int.Parse(@Html.DisplayFor(modelItem => item.Remaining).ToString());

                    /* This is to update the remaining quantity in the products page in relation to the shoppingcart. */
                    if (Session["Cart"] != null)
                    {
                        List<ShoppingCart> cartList = (List<ShoppingCart>)Session["Cart"];

                        foreach (var cartitem in cartList)
                        {
                            if (cartitem.Item.ArticleId == @item.ArticleId)
                            {
                                remains -= cartitem.Quantity;
                                break;
                            }
                        }
                    }

                    if (remains == 0)
                    {
                        message = "Slut i lager";
                        <p style="color: red">@message</p>
                    }
                    else if (remains <= 5)
                    {
                        message = "Bara " + remains + "st kvar";
                        <p>@message</p>
                    }
                    else
                    {
                        message = "Finns i lager";
                        <p style="color: green">@message</p>
                    }
                }


            </td>

            <td>

                @* Add to cart is only shown if there are remaining products in store *@
                @if (int.Parse(@Html.DisplayFor(modelItem => item.Remaining).ToString()) > 0)
                {
                    @Html.ActionLink("Lägg i Kundvagn", "AddToCart", "Product", new {id = @item.ArticleId, fromView = "Products"}, null)
                }


            </td>
        </tr>
                    } @* For each loop, end *@




                </table>
